#!/bin/bash
# Copyright (c) 2015, Cyredra Software
# Copyright (c) 2015, Redmaner
# This work is licensed under the Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International license
# The license can be found at http://creativecommons.org/licenses/by-nc-sa/4.0/

# Define bash colors for Mac OSX / Linux
case `uname -s` in
    Darwin) 
           txtrst='\033[0m' # Color off
           txtred='\033[0;31m' # Red
           txtgrn='\033[0;32m' # Green
           txtblu='\033[0;34m' # Blue
           ;;
    *)
           txtrst='\e[0m' # Color off
           txtred='\e[1;31m' # Red
           txtgrn='\e[1;32m' # Green
           txtblu='\e[1;36m' # Blue
           ;;
esac

# VARS
up=$PWD
FOLDER_NAME=$(basename $up)
cyra_dir=$up/.cyrag
cyra_cfg=$up/build.cyrag
BUILD_DATE=$(date +"%a %d %B %Y %H:%M %Z")

# Do some basic checks
if [ ! -e $cyra_cfg ]; then
	echo -e "${txtred}ERROR:${txtrst} build.cyrag not found. Copy cyra_launcher.cfg to build.cyrag and edit it to your needs";
	exit
else 
	source $cyra_cfg;
fi

if [ ! -d $cyra_dir/gradle ]; then
	mkdir -p $cyra_dir/gradle;
fi

echo 'sdk.dir='$SDK_PATH'' > $up/local.properties;

make_gradle_buildfile() {
echo -e "${txtblu}Generating:${txtrst} build.gradle using build.cyrag"
rm -f $up/build.gradle;
cat > $up/build.gradle << EOF
// Cyra Launcher gradle build file
buildscript {
    repositories {
        $GRADLE_REPO()
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:$GRADLE_ANDROID_PLUGIN'
    }
}

allprojects {
    repositories {
        $GRADLE_REPO()
    }
}

apply plugin: 'com.android.application'

android {
   sourceSets {
        main {
            res.srcDirs = ['res', 'Cyredra/res', 'WallpaperPicker/res']
            main.java.srcDirs = ['src', 'Cyredra/src', 'WallpaperPicker/src']
            manifest.srcFile 'AndroidManifest.xml'
        }
	}

    signingConfigs {
        $SIGN_CONFIG {
            keyAlias '$KEY_ALIAS'
            keyPassword '$KEY_PASWORD'
            storeFile file('$STORE_FILE')
            storePassword '$STORE_PASWORD'
        }
    }

    compileOptions {
        sourceCompatibility = "$JAVA"
        targetCompatibility = "$JAVA"
    }

     lintOptions {
         abortOnError false
    }

    compileSdkVersion $COMPILE_SDK_VERSION
    buildToolsVersion "$BUILD_TOOLS"
    defaultConfig {
        versionCode $VERSION_CODE
        versionName "$VERSION_CODE"
        applicationId "$APPLICATION_ID"
        minSdkVersion $MIN_SDK_VERSION
        targetSdkVersion $TARGET_SDK_VERSION
        signingConfig signingConfigs.$SIGN_CONFIG
    }

    buildTypes {
        release {
            minifyEnabled $PROGUARD
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard.flags'
        }
    }
}

dependencies {
    compile 'com.android.support:support-v4:+'
    compile 'com.android.support:recyclerview-v7:+'
}
EOF
}

make_buildinfo() {
echo -e "${txtblu}Generating:${txtrst} Buildinfo"
cat > $up/res/values/buildinfo_strings.xml << EOF
<?xml version="1.0" encoding="utf-8"?>
<!--
/*
* Copyright (C) 2015 Cyredra Software
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*      http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/
-->

<resources xmlns:xliff="urn:oasis:names:tc:xliff:document:1.2">
	<string name="cyra_launcher_version">$VERSION_NAME.$VERSION_CODE</string>
	<string name="cyra_launcher_date">$BUILD_DATE</string>
	<string name="cyra_launcher_tools">"Java $JAVA, 
Gradle $GRADLE, 
android gradle plugin $GRADLE_ANDROID_PLUGIN, 
android build tools $BUILD_TOOLS"</string>
</resources>
EOF
}

check_succesful_build() {
if [ $(grep 'BUILD SUCCESSFUL' $up/cyrag.log | wc -l) -gt 0 ]; then
	echo -e "${txtgrn}Build succesful:${txtrst} see $up/build/outputs/apk for the apk. See $up/cyrag.log for additional build info"
else
	echo -e "${txtred}Build failed:${txtrst} see $up/cyrag.log for additional build info"
fi
}

install_apk () {
if [ -e $up/build/outputs/apk/$FOLDER_NAME-release.apk ]; then
	adb install -r $up/build/outputs/apk/$FOLDER_NAME-release.apk
elif [ -e $up/build/outputs/apk/$FOLDER_NAME-debug.apk ]; then
	adb install -r $up/build/outputs/apk/$FOLDER_NAME-debug.apk
else
	echo "No builds found: run build first"
	exit
fi
}

git_commit () {
rm -f $up/res/values/buildinfo_strings.xml
git add src
git add res
git add AndroidManifest.xml
git add Cyredra
git add WallpaperPicker
git add cyrag cyra_launcher.conf
git commit
NEW_VERSION_CODE=$(expr $VERSION_CODE + 1);
cat $cyra_cfg > $cyra_dir/build.cyrag.new
sed 's/VERSION_CODE='$VERSION_CODE'/VERSION_CODE='$NEW_VERSION_CODE'/' $cyra_dir/build.cyrag.new > $cyra_cfg
}

# Check for gradle
if [ ! -d $cyra_dir/gradle/$GRADLE ]; then
	echo -e "${txtblu}Downloading and preparing:${txtrst} Gradle $GRADLE"
	wget -q https://services.gradle.org/distributions/gradle-$GRADLE-bin.zip -O $cyra_dir/gradle/gradle-$GRADLE.zip
	cd $cyra_dir/gradle
	unzip -oq -K gradle-$GRADLE.zip	
	mv gradle-$GRADLE $GRADLE
	rm -f gradle-$GRADLE.zip
	cd $up
fi

GRADLEC=$up/.cyrag/gradle/$GRADLE/bin/gradle

if [ $# -gt 0 ]; then
	case $1 in
		release) 
		make_gradle_buildfile; make_buildinfo; 
		echo -e "${txtblu}Assemble Release:${txtrst} \nUsing Gradle $GRADLE, android gradle plugin $GRADLE_ANDROID_PLUGIN, Java $JAVA and android build tools $BUILD_TOOLS"
		$GRADLEC assembleRelease &> $up/cyrag.log
		check_succesful_build;;

		cleanRelease) 
		make_gradle_buildfile; make_buildinfo; 
		echo -e "${txtblu}Clean:${txtrst} using Gradle $GRADLE"
		$GRADLEC clean
		echo -e "${txtblu}Assemble Release:${txtrst} \nUsing Gradle $GRADLE, android gradle plugin $GRADLE_ANDROID_PLUGIN, Java $JAVA and android build tools $BUILD_TOOLS"
		$GRADLEC assembleRelease &> $up/cyrag.log
		check_succesful_build;;

		debug) 
		make_gradle_buildfile; make_buildinfo; 
		echo -e "${txtblu}Assemble Debug:${txtrst} \nUsing Gradle $GRADLE, android gradle plugin $GRADLE_ANDROID_PLUGIN, Java $JAVA and android build tools $BUILD_TOOLS"
		$GRADLEC assembleDebug &> $up/cyrag.log
		check_succesful_build;;

		cleanDebug) 
		make_gradle_buildfile; make_buildinfo; 
		echo -e "${txtblu}Clean:${txtrst} using Gradle $GRADLE"
		$GRADLEC clean
		echo -e "${txtblu}Assemble Debug:${txtrst} \nUsing Gradle $GRADLE, android gradle plugin $GRADLE_ANDROID_PLUGIN, Java $JAVA and android build tools $BUILD_TOOLS"
		$GRADLEC assembleDebug &> $up/cyrag.log
		check_succesful_build;;

		clean)
		$GRADLEC clean
		rm -f build.gradle
		rm -rf .gradle
		rm -rf .cyrag;;

		install)
		install_apk;;

		commit)
		git_commit;;

	esac
else 
	echo -e "cyrag [arguments]\n\nARGUMENTS:\nrelease: Assemble release\ncleanRelease: clean and assemble release\ndebug: assemble debug\ncleanDebug: clean and assemble debug"
fi

